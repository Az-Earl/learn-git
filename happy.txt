通过
git add 文件名
将文件添加到仓库

通过
git commit -m "这里写注释"
将文件提交

可以一次提交多个添加的文件
git add file1.txt
git add file2.txt,file3.txt
git commit -m "一次性提交三个文件"

通过
git status
命令查看仓库当前的状态

通过
git diff
查看文件的区别, 知道文件做了哪些修改

通过
git log
命令查看历史记录
也可以显示简略版的
git log --pretty=oneline

通过
git reset --hard HEAD~100(100表示往上回退的版本数)
git reset --hard 323234(323234表示具体的版本id)
来回退版本

通过
git reflog
来记录每一次命令

通过
git diff HEAD -- 文件名
可以查看工作区和版本库里的文件的区别


直接丢弃工作区的修改,让文件回到上一次提交时的样子,用
git checkout -- 文件名

如果你把文件还保存到了暂存区, 那么要先
git reset HEAD 文件名
就能回到工作区, 再git checkout -- 文件名

通过
git rm 文件名
可以用来删除一个文件

在先有本地库的情况下, 要推送远程库
要关联一个远程库, 使用命令
git remote add origin git@server-name:path/repo-name.git
如
git remote add origin git@github.com:Az-Earl/learn-git.git

关联后, 使用命令
git push -u origin master
第一次推送master分支的所有内容

此后, 每次本地提交后, 只要有必要, 就可以使用命令
git push origin master
推送最新的修改


在先有远程库的情况下, 要克隆到本地
先在github创建一个新的仓库(自动创建一个readme)
通过
git clone git@github.com:Az-Earl/库名.git
克隆一个到本地

创建一个分支
创建dev分支, 然后切换到dev分支
git checkout -b dev
这个命令相当于下面两个命令
git branch dev
git checkout dev

然后, 用
git branch
命令查看当前分支

现在我们可以在dev分支上正常的提交

在,dev分支的工作完成时, 我们切换回master分支
git checkout master

这个时候在dev分支上添加的内容还有没有在master上
我们需要把dev分支的工作成果合并到master上
git merge dev

合并完成后, 我们可以删除掉dev分支
git branch -d dev

删除后, 查看下
git branch
就只剩下master分支了

因为创建, 合并, 删除分支非常快, 所以鼓励使用分支, 对工作效率没有影响, 还更安全

一览表:
查看分支：git branch
创建分支：git branch <name>
切换分支：git checkout <name>
创建+切换分支：git checkout -b <name>
合并某分支到当前分支：git merge <name>
删除分支：git branch -d <name>

在分支上创建一个新的东西